[2010-04-19]
============

+ Introduced sk::oci::Strings, sk::oci::Integers, etc. to deal with bindable
  data types. It will take up functionality of current sk::oci::bind::Value
  objects, implementing extra things as capping strings.

[2010-04-09]
============

- Implement top level binding capabilities.

[2010-03-05]

- Implement more data types

+ [2010-03-08] Covered all existing functionality.
  Write functional tests for real Oralce access.

[2010-03-02]
============

+ [2010-03-03]
  boundDataAt() => boundData(bid)

+ [2010-03-03]
  Rename StringData to CharsData. And all related methods and data names.

+ [2010-03-03]
  No intValue() returning non-const reference, setIntValue() instead (will
  also take care of resetting null indicator).

* [2010-03-03] Decided not to do this as only 2 cases are available and
  besides, it was possible to come up with pretty optimal internal
  implementation.
  Consider splitting bind::Data into 2 parts -- one that deals with position,
  another for tag.

[2010-03-01]
============

+ Added ability to specify NULL value for the data to be bound. For that,
  sk::oci::Data#null(bool) is now available.

[2010-02-28]
============

+ Added method info() that returns more detailed information than inspect().
  Changed apps to use this method for presentations.

+ Implemented internal processing for column level return codes and for the
  resulting data sizes.

+ Implemented useColumnCodes() for db::Statement and db::Cursor to
  control processing of columm level return codes.

+ Implemented methods useTruncate() for db::Statement and db::Cursor.

+ Got rid of fetchIgnoreTruncate() -- db::Statement#fetch() now map 1406 to 0
  when useTruncate flag is set.

+ Added methods sk::oci::Data#getSize() and sk::oci::Data#getColumnCode().

+ Implemented control for SUCCESS_WITH_INFO after fetch(). Added method 
  sk::oci::Cursor#hasInfo() to query whether info was available. 
  NOTE: it is always the case when column level return codes are used.

[2010-02-27]
============

+ [2010-02-28]
  Implement inspect() for bind::IntData and bind::StringData.

+ [2010-02-28]
  Change apps to use inspect() for data presentation.

[2010-02-26]
============

+ [2010-02-27]
  bind::Data must return non-const uint32_t reference so that it can be
  modified.

+ [2010-02-27]
  Specific bind data type classes, like bind::Integer and bind::String, will
  take care of construction and inspect().

+ [2010-03-03]
  bind::Registry#boundMutableData() must return non-const reference to 
  bind::Data.

+ [2010-03-03]
  db::oci::Statement must have boundMutableData() to make it possible to 
  modify bound data (say, for the new iterations).

+ [2010-03-02]
  Bind by tag.

* [2010-03-02] Deliberetally deciding against implementing this feature as it is
  just conveniency on top of already existing functionality. Besides, it would
  take way too much resources for something not that important.
  Retrieve by tag.

+ [2010-03-03]
  Array capable data binds.

+ [2010-02-28]
  Support for resulting data lengths.

+ [2010-02-28]
  Support for column-level return codes.

- Implement mocking

- Make it possible to wrap existing oracle connections.
